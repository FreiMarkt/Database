-- Database: timebankdb

-- DROP DATABASE timebankdb;

CREATE DATABASE timebankdb
  WITH OWNER = postgres
       ENCODING = 'UTF8'
       TABLESPACE = pg_default
       LC_COLLATE = 'en_US.UTF-8'
       LC_CTYPE = 'en_US.UTF-8'
       CONNECTION LIMIT = -1;

-- DROP TABLE "approveorder";

CREATE TABLE "approverder"
(
  "ProductID" uuid NOT NULL,
  productname character varying(20)NOT NULL,
  approvaldate date NOT NULL,
  producttimechecks numeric(6,2) NOT NULL
  
);

-- Table: "feedbacks"

-- DROP TABLE "feedbacks";

CREATE TABLE "feedbacks"
(
  feedback text NOT NULL,
  feedbackid uuid NOT NULL,
  memberid uuid NOT NULL,
  feedbacktitle character varying(20),
  CONSTRAINT "FeedbackPK" PRIMARY KEY (feedbackid),
  CONSTRAINT "FeedbackFK" FOREIGN KEY (memberid)
      REFERENCES "Member" (memberid) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE "feedbacks"
  OWNER TO postgres;
  
  
-- Table: "jobposting"

-- DROP TABLE "jobposting";

CREATE TABLE "jobposting"
(
  accountno character varying(15)NOT NULL, -- unique for each active member
  jobcategory character varying(20)NOT NULL, -- division of jobs according to their nature
  jobid uuid NOT NULL, -- according to when the job was posted, a unique ID is given for each job
  memberid uuid NOT NULL,
  postingdate date NOT NULL  -- Date when the job was posted
);

-- Table: "jobs"

-- DROP TABLE "jobs";

CREATE TABLE "jobs"
(
  offererid uuid NOT NULL, -- id of the person who is offering the job
  jobcategory character varying(20) NOT NULL,
  jobid uuid NOT NULL, -- unique for each job posted
  availabledate date NOT NULL, -- date from which the job is available to carry out
  jobduration numeric(6,2), -- date within which the job is available
  jobdescription text,
  jobrequirements text , -- special qualities needed for the job
  finishdate date, -- date when the job is expected to finish
  jobtimechecks numeric(6,2) NOT NULL, -- referred as BiX in the system. the total time check earned for the job
  jobaddress text NOT NULL, -- place to do the job
  jobname character varying(50)NOT NULL -- specification of the job
);

-- Table: "orderdetailsforcustomer"

-- DROP TABLE "orderdetailsforcustomer";

CREATE TABLE "orderdetailsforcustomer"
(
  buyerid uuid NOT NULL,
  sellerid uuid NOT NULL,
  productid uuid NOT NULL,
  approvaldate date,
  pricetimechecks numeric(6,2),
  productname character varying(20)
);

-- Table: "productcart"

-- DROP TABLE "productcart";

CREATE TABLE "productcart"
(
  productname character varying(20)NOT NULL,
  productid uuid NOT NULL,
  productcategory character varying(20),
  producttimechecks numeric(6,2) NOT NULL,
  buyerid uuid NOT NULL, -- account id of the interested buyer
  totalsoldnumber integer NOT NULL, -- total number of products selected by the buyer
  totaltimechecks numeric(6,2) NOT NULL
);

-- Table: "productlist"

-- DROP TABLE "productlist";

CREATE TABLE "productlist"
(
  productname character varying(15)NOT NULL,
  productid uuid NOT NULL,
  productcategory character varying(20)NOT NULL,
  producttimechecks numeric(6,2) NOT NULL
);


-- Table: "products"

-- DROP TABLE "products";

CREATE TABLE "products"
(
  sellerid uuid NOT NULL, -- the person who posts products for sale
  productcategory character varying(20), -- categories to differentiate different products
  productid uuid NOT NULL, -- unique for each product
  productdescription character varying(200), -- details of the product
  selleraddress character varying(25),
  productname character varying(20)NOT NULL, -- name of the product
  producttimechecks numeric(6,2),
  productcondition boolean, -- 0- good...
  shippingcondition boolean,
  shippingcost numeric(6,2),
  deliveryduration integer,
  numberavailable integer,
  productimage bytea -- image of the product
);

-- Table: "skillposting"

-- DROP TABLE "skillposting";

CREATE TABLE "skillposting"
(
  memberid uuid NOT NULL, -- unique for each active member
  accountno character varying(15) NOT NULL, -- unique for each active member. must use this during transactions
  postingdate date, -- Date when the skill was posted
  spcomment text, -- About timing and other criteria
  skillid uuid NOT NULL, -- unique for each different skill posted
  skillcategory character varying(20) NOT NULL -- division of skill according to their nature
);

-- Table: "skills"

-- DROP TABLE "skills";

CREATE TABLE "skills"
(
  skillid uuid NOT NULL, -- unique for each skill
  skilldescription text, -- detail of the skills
  skillname character varying(20) NOT NULL,
  skillcategory character varying(20)NOT NULL,
  workerid uuid NOT NULL-- unique for each active member
);

-- Table: "timecheckalteration"

-- DROP TABLE "timecheckalteration";

CREATE TABLE "timecheckalteration"
(
  buyerid uuid NOT NULL,
  sellerid uuid NOT NULL,
  producttimechecks numeric(6,2) NOT NULL,
  transactionid uuid NOT NULL,
  transactiondate date NOT NULL
);

-- Table: confirmation

-- DROP TABLE confirmation;

CREATE TABLE confirmation
(
  workerid uuid NOT NULL,
  offererid uuid NOT NULL,
  jobid uuid NOT NULL,
  confirmationdate date NOT NULL -- date when the agreement is done between offerer and worker
);

-- Table: jobstatus

-- DROP TABLE jobstatus;

CREATE TABLE jobstatus
(
  jobid uuid NOT NULL,
  jobstatus smallint NOT NULL DEFAULT 0-- 0=free, 1=reserved, 2=completed
);

-- Table: member

-- DROP TABLE member;

CREATE TABLE member
(
  memberid uuid NOT NULL, -- it is the primary key for identify each passivemember.
  firstname character varying(15) NOT NULL,
  lastname character varying(15) NOT NULL,
  ppassword character varying(30)NOT NULL, -- It is password when member login, the length of it should >6 and <16
  gender character varying (10),
  address text NOT NULL, -- It is the recent address of passivemember.
  city character varying(15) NOT NULL,
  country character varying(15) NOT NULL, --
  email character varying(30), -- The email address should contains "@".
  phonenumber character varying(20), -- it is the phone number which can be reached.
  paymentstatus boolean NOT NULL DEFAULT true, -- It is the payment status of membership fee, true=paid, false=unpaid.
  fiftyfivemember boolean NOT NULL DEFAULT true, -- If your age>55, then you are 55+Member, the status is true, otherwise, the status is false.
  postalcode character varying(15), -- It is the postal code for your recent address.
  birthday date ,
  roleid smallint NOT NULL DEFAULT 3 -- 1=Active user (non-55+account), 2=Active user (55+account), 3=Passive user (non-55+account), 4=Passive user (55+account), 5=teller, 6=system administator
);

-- Table: modifytimecheck

-- DROP TABLE modifytimecheck;

CREATE TABLE modifytimecheck
(
  offererid uuid NOT NULL, -- specific ID for each job provider
  hours numeric(6,2) NOT NULL, -- total amount of hours agreed to be paid to the worker
  completiondate date NOT NULL, -- date the job is completed or agreed to be completed
  transactionid uuid NOT NULL -- unique for each transaction
);

-- Table: offerercontact

-- DROP TABLE offerercontact;

CREATE TABLE offerercontact
(
  offereid uuid NOT NULL,
  email text ,
  address text ,
  phonenumber character varying(20)
);

-- Table: personalaccount

-- DROP TABLE personalaccount;

CREATE TABLE personalaccount
(
  accountno character varying(15) NOT NULL, -- It is your personal account number which is assigned randomly by system.
  memberid uuid NOT NULL, -- It is the foreign key which can connect the member table.
  firstname character varying(15) NOT NULL,
  lastname character varying(15) NOT NULL,
  sumhours numeric(6,2)[] NOT NULL, -- It is the sum of hours which earned by you. After you pay membership fee, you will get three hours at the first time.
  transactionid uuid NOT NULL -- It is ID of each transaction
);

-- Table: productposting

-- DROP TABLE productposting;

CREATE TABLE productposting
(
  memberid uuid NOT NULL,
  postingdate date, -- date when the product was posted for sale
  productid uuid NOT NULL, -- id for the product, each unique
  productcategory character varying(20) NOT NULL,
  productimechecks numeric(6,2) NOT NULL, -- price of the product in terms of time checks
  productname character varying(20)NOT NULL
);

-- Table: productstates

-- DROP TABLE productstates;

CREATE TABLE productstates
(
  productid uuid NOT NULL,
  productname character varying(20)NOT NULL,
  productstate boolean -- 0- available...
);

-- Table: profileverification

-- DROP TABLE profileverification;

CREATE TABLE profileverification
(
  memberid uuid NOT NULL,
  tellerid uuid NOT NULL,
  verificationdate date NOT NULL, -- it is the date of verification
  verificationstatus boolean NOT NULL DEFAULT true -- true=pass;...
);

-- Table: receipt

-- DROP TABLE receipt;

CREATE TABLE receipt
(
  "offererID" uuid NOT NULL,
  recipientid uuid NOT NULL,
  recipientaccountno character varying(15) NOT NULL, -- It is the account number of recipient.
  offereraccountno character varying NOT NULL, -- it is the account number of offerer.
  transactionid uuid NOT NULL,
  workinghours numeric(6,2)[] NOT NULL,
  signdate date NOT NULL -- it is the date of signing the receipt.
);

-- Table: receiptmodification

-- DROP TABLE receiptmodification;

CREATE TABLE receiptmodification
(
  tellerid uuid NOT NULL,
  transactionid uuid NOT NULL,
  description text, -- it is the description about where and what you have modified.
  modificationdate date NOT NULL -- it is the date of receipt modification
);

-- Table: supervision

-- DROP TABLE supervision;

CREATE TABLE supervision
(
  tellerid uuid NOT NULL,
  memberid uuid NOT NULL,
  feedbackid uuid NOT NULL
);

-- Table: systemadministrator

-- DROP TABLE systemadministrator;

CREATE TABLE systemadministrator
(
  adminid uuid NOT NULL, -- It is the ID of administrator.
  adminname character varying(15)NOT NULL, -- the name of administrator
  ppassword character varying(16) NOT NULL, -- the length of password should >6 and <16
  email character varying(30), -- should contain @
  phonenumber character varying(20),
  roleid smallint NOT NULL DEFAULT 6 -- 1=Active user (non-55+account), 2=Active user (55+account), 3=Passive user (non-55+account), 4=Passive user (55+account),5=teller, 6=system administator
);

-- Table: teller

-- DROP TABLE teller;

CREATE TABLE teller
(
  tellerid uuid NOT NULL, -- It is the ID which assigned by system randomly of teller.
  tellername character varying(25) NOT NULL, -- it is the name of teller
  ppassword character varying(16) NOT NULL, -- the length of it should >6 and <16
  email character varying(30) ,
  phonenumber character varying(20),
  roleid smallint NOT NULL DEFAULT 4-- 1=Active user (non-55+account), 2=Active user (55+account), 3=Passive user (non-55+account), 4=Passive user (55+account),5=teller, 6=system administator
);

-- Table: transaction

-- DROP TABLE transaction;

CREATE TABLE transaction
(
  transactionid uuid NOT NULL, -- it is the id which assigned by system randomly of each transaction.
  transactionname character varying(50) NOT NULL,
  ddescription text, -- it is the description of each transaction.
  workinghour numeric(6,2)NOT NULL, -- each transaction has specific hours used for exchanging.
  offererid uuid NOT NULL, -- it is the ID of member who provide the job.
  recipientid uuid NOT NULL, -- it is the ID of member who recieve the job.
  transactionstatus boolean NOT NULL DEFAULT true, -- true=done; false=undone
  transactiontime date NOT NULL -- it is the time of when transaction is done
);

-- Table: devices

-- DROP TABLE devices;
--  this table stores device registration id, that are used to 
-- communicate with Google Cloud Messaging service
-- deviceregistrationid is device identificator
CREATE TABLE devices
(
  deviceid uuid NOT NULL DEFAULT uuid_generate_v4(),
  inserttime timestamp without time zone NOT NULL DEFAULT now(),
  deviceregistrationid text,
  isactive boolean DEFAULT false,
  CONSTRAINT "DevicesPK" PRIMARY KEY (deviceid)
)
WITH (
  OIDS=FALSE
);
